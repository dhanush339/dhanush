#include <stdio.h>
#include <string.h>

// Define maximum number of books
#define MAX_BOOKS 100

// Structure to hold book information
struct Book {
    int id;
    char title[50];
    char author[50];
    int year;
};

// Function declarations
void addBook(struct Book library[], int *count);
void removeBook(struct Book library[], int *count);
void searchBook(struct Book library[], int count);
void listBooks(struct Book library[], int count);
int findBookById(struct Book library[], int count, int id);

int main() {
    struct Book library[MAX_BOOKS];
    int count = 0;
    int choice;
    
    while(1) {
        printf("\n*** Library Management System ***\n");
        printf("1. Add Book\n");
        printf("2. Remove Book\n");
        printf("3. Search Book\n");
        printf("4. List All Books\n");
        printf("5. Exit\n");
        printf("Enter your choice (1-5): ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                addBook(library, &count);
                break;
            case 2:
                removeBook(library, &count);
                break;
            case 3:
                searchBook(library, count);
                break;
            case 4:
                listBooks(library, count);
                break;
            case 5:
                printf("Exiting program. Goodbye!\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    
    return 0;
}

// Function to add a book to the library
void addBook(struct Book library[], int *count) {
    if (*count >= MAX_BOOKS) {
        printf("Library is full! Cannot add more books.\n");
        return;
    }
    
    struct Book newBook;
    
    printf("Enter book ID: ");
    scanf("%d", &newBook.id);
    getchar(); // To clear the newline character from the buffer
    printf("Enter book title: ");
    fgets(newBook.title, sizeof(newBook.title), stdin);
    newBook.title[strcspn(newBook.title, "\n")] = '\0'; // Remove newline character
    printf("Enter author name: ");
    fgets(newBook.author, sizeof(newBook.author), stdin);
    newBook.author[strcspn(newBook.author, "\n")] = '\0'; // Remove newline character
    printf("Enter year of publication: ");
    scanf("%d", &newBook.year);

    library[*count] = newBook;
    (*count)++;
    printf("Book added successfully!\n");
}

// Function to remove a book from the library
void removeBook(struct Book library[], int *count) {
    int id, index;
    
    if (*count == 0) {
        printf("Library is empty! No books to remove.\n");
        return;
    }

    printf("Enter book ID to remove: ");
    scanf("%d", &id);
    
    index = findBookById(library, *count, id);
    
    if (index == -1) {
        printf("Book with ID %d not found.\n", id);
    } else {
        // Shift books after the removed book
        for (int i = index; i < *count - 1; i++) {
            library[i] = library[i + 1];
        }
        (*count)--;
        printf("Book with ID %d removed successfully.\n", id);
    }
}

// Function to search for a book by title or author
void searchBook(struct Book library[], int count) {
    char query[50];
    int found = 0;

    getchar(); // Clear the newline character from the buffer
    printf("Enter book title or author to search: ");
    fgets(query, sizeof(query), stdin);
    query[strcspn(query, "\n")] = '\0'; // Remove newline character

    for (int i = 0; i < count; i++) {
        if (strstr(library[i].title, query) != NULL || strstr(library[i].author, query) != NULL) {
            printf("\nFound Book: \n");
            printf("ID: %d\n", library[i].id);
            printf("Title: %s\n", library[i].title);
            printf("Author: %s\n", library[i].author);
            printf("Year: %d\n", library[i].year);
            found = 1;
        }
    }

    if (!found) {
        printf("No books found matching your search.\n");
    }
}

// Function to list all books in the library
void listBooks(struct Book library[], int count) {
    if (count == 0) {
        printf("Library is empty!\n");
        return;
    }
    
    printf("\n*** List of Books ***\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d\n", library[i].id);
        printf("Title: %s\n", library[i].title);
        printf("Author: %s\n", library[i].author);
        printf("Year: %d\n\n", library[i].year);
    }
}

// Function to find a book by ID
int findBookById(struct Book library[], int count, int id) {
    for (int i = 0; i < count; i++) {
        if (library[i].id == id) {
            return i;
        }
    }
    return -1; // Book not found
}
